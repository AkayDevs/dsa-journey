{
  "LeetCode Solution Template": {
    "prefix": "leetcode",
    "description": "Template for LeetCode problems with helper functions",
    "body": [
      "#!/usr/bin/env python3",
      "from typing import List, Optional, Dict, Any",
      "import sys",
      "import os",
      "from collections import deque",
      "",
      "# ----- Input/Output Setup -----",
      "",
      "input_file = None",
      "output_file = None",
      "input_lines = []",
      "line_index = 0",
      "",
      "def setup_io():",
      "    \"\"\"Setup input and output sources\"\"\"",
      "    global input_file, output_file, input_lines, line_index",
      "    # Try to open input file",
      "    try:",
      "        input_file = open('input.txt', 'r')",
      "        input_lines = input_file.readlines()",
      "        print(f\"Reading input from input.txt ({len(input_lines)} lines)\")",
      "    except FileNotFoundError:",
      "        print(\"No input.txt found, reading from console\")",
      "    ",
      "    # Try to open output file",
      "    try:",
      "        output_file = open('output.txt', 'w')",
      "        print(\"Writing output to output.txt\")",
      "    except:",
      "        print(\"Could not open output.txt, writing to console\")",
      "",
      "def cleanup_io():",
      "    \"\"\"Close open files\"\"\"",
      "    if input_file:",
      "        input_file.close()",
      "    if output_file:",
      "        output_file.close()",
      "",
      "def read_line() -> str:",
      "    \"\"\"Read a line from input file or console\"\"\"",
      "    global line_index",
      "    if input_lines:",
      "        if line_index < len(input_lines):",
      "            line = input_lines[line_index].strip()",
      "            line_index += 1",
      "            return line",
      "        else:",
      "            raise EOFError(\"Reached end of input file\")",
      "    else:",
      "        return input().strip()",
      "",
      "def write_output(result):",
      "    \"\"\"Write result to output file or console\"\"\"",
      "    output_str = str(result)",
      "    if output_file:",
      "        output_file.write(output_str + '\\n')",
      "    print(output_str)",
      "",
      "# ----- Helper Functions for Parsing Input -----",
      "",
      "def read_int() -> int:",
      "    \"\"\"Read a single integer from input\"\"\"",
      "    return int(read_line())",
      "",
      "def read_float() -> float:",
      "    \"\"\"Read a single float from input\"\"\"",
      "    return float(read_line())",
      "",
      "def read_str() -> str:",
      "    \"\"\"Read a single string from input\"\"\"",
      "    return read_line()",
      "",
      "def read_list_int() -> List[int]:",
      "    \"\"\"Read a list of integers from input\"\"\"",
      "    return list(map(int, read_line().split()))",
      "",
      "def read_list_float() -> List[float]:",
      "    \"\"\"Read a list of floats from input\"\"\"",
      "    return list(map(float, read_line().split()))",
      "",
      "def read_list_str() -> List[str]:",
      "    \"\"\"Read a list of strings from input\"\"\"",
      "    return read_line().split()",
      "",
      "def read_grid(rows: int) -> List[List[int]]:",
      "    \"\"\"Read a grid of integers with the specified number of rows\"\"\"",
      "    return [read_list_int() for _ in range(rows)]",
      "",
      "def read_grid_char(rows: int) -> List[List[str]]:",
      "    \"\"\"Read a grid of characters with the specified number of rows\"\"\"",
      "    return [list(read_line()) for _ in range(rows)]",
      "",
      "# ----- Data Structure Definitions -----",
      "",
      "class TreeNode:",
      "    def __init__(self, val=0, left=None, right=None):",
      "        self.val = val",
      "        self.left = left",
      "        self.right = right",
      "",
      "class ListNode:",
      "    def __init__(self, val=0, next=None):",
      "        self.val = val",
      "        self.next = next",
      "",
      "# ----- Solution Class -----",
      "",
      "class Solution:",
      "    def ${1:method_name}(self, ${2:parameters}):",
      "        ${3:# TODO: Implement solution}",
      "        ${4:pass}",
      "",
      "def main():",
      "    setup_io()",
      "    ",
      "    try:",
      "        # ----- Input Parsing -----",
      "        ${5:# TODO: Parse input}",
      "        ${6:# Example: nums = read_list_int()}",
      "        ${7:# Example: target = read_int()}",
      "        ",
      "        # ----- Solution Execution -----",
      "        solution = Solution()",
      "        result = solution.${1:method_name}(${8:arguments})",
      "        ",
      "        # ----- Output Formatting -----",
      "        write_output(result)",
      "    finally:",
      "        cleanup_io()",
      "",
      "if __name__ == \"__main__\":",
      "    main()"
    ]
  }
} 